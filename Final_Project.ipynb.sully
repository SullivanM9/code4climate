{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "authorship_tag": "ABX9TyPe61su3FKuAjlniFiBhPMj",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/SullivanM9/code4climate/blob/main/Final_Project.ipynb.sully\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 1,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 53
        },
        "id": "Q-w2_4mH1N4b",
        "outputId": "0f37dd00-f485-463e-83ea-00b2d01c7729"
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "What day do you want to analyze the data2022\n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "'2022'"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "string"
            }
          },
          "metadata": {},
          "execution_count": 1
        }
      ],
      "source": [
        "input(\"What day do you want to analyze the data\")"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "from numpy import mean\n",
        "import pandas as pd\n",
        "\n",
        "data = pd.read_csv(\"clean_20211224.csv\")\n",
        "\n"
      ],
      "metadata": {
        "id": "4iq0KNQ54epB"
      },
      "execution_count": 2,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "data"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 802
        },
        "id": "BqofiyVS67kS",
        "outputId": "5472d3a0-4aa9-41b2-fc95-adc149d5a4de"
      },
      "execution_count": 3,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "    hour    temp(F)   humidity         AQI        PM1      PM2.5       PM10\n",
              "0      0  42.206897  51.206897   74.827586  15.105862  23.448276  26.645172\n",
              "1      1  42.333333  51.366667   81.466667  17.470000  26.582333  30.720667\n",
              "2      2  41.266667  52.500000   91.900000  20.154000  31.453333  37.000333\n",
              "3      3  39.966667  54.133333  100.666667  22.989000  35.400000  41.405667\n",
              "4      4  39.600000  55.333333  112.833333  26.356333  40.306000  48.979000\n",
              "5      5  39.000000  56.666667  114.766667  26.774000  41.073667  50.033667\n",
              "6      6  37.900000  58.800000  121.466667  28.334333  43.830000  54.793667\n",
              "7      7  38.233333  62.100000  125.766667  28.790000  45.567667  57.950667\n",
              "8      8  38.266667  62.200000  128.666667  29.682667  46.765000  59.567000\n",
              "9      9  37.233333  65.066667  132.166667  30.250000  48.140333  61.433000\n",
              "10    10  37.500000  66.933333  129.600000  29.545333  47.121000  60.071000\n",
              "11    11  39.033333  65.200000  121.566667  27.856667  43.797667  55.458667\n",
              "12    12  39.300000  68.666667  125.700000  28.561667  45.514667  58.342333\n",
              "13    13  41.566667  74.266667  125.766667  28.697000  45.544000  58.140667\n",
              "14    14  43.100000  75.433333  124.100000  27.143000  44.907333  57.882667\n",
              "15    15  43.600000  76.100000  114.600000  23.920000  41.040333  53.198667\n",
              "16    16  45.433333  74.266667  116.000000  24.252333  41.619000  54.034667\n",
              "17    17  47.600000  72.500000  116.366667  25.116333  41.772667  53.697333\n",
              "18    18  49.166667  71.566667  106.633333  23.298000  37.815333  47.257667\n",
              "19    19  50.000000  70.166667  100.666667  22.360333  35.440333  42.834667\n",
              "20    20  50.366667  69.033333   95.433333  21.093333  33.152333  38.935000\n",
              "21    21  51.200000  67.433333   89.433333  19.027333  30.403000  34.746000\n",
              "22    22  50.766667  67.166667   87.800000  18.885667  29.615667  33.551333\n",
              "23    23  49.000000  71.966667   98.933333  21.726333  34.686333  41.023000"
            ],
            "text/html": [
              "\n",
              "\n",
              "  <div id=\"df-d6dbad15-cf26-40f1-86a2-3ecb1f89bb1e\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>hour</th>\n",
              "      <th>temp(F)</th>\n",
              "      <th>humidity</th>\n",
              "      <th>AQI</th>\n",
              "      <th>PM1</th>\n",
              "      <th>PM2.5</th>\n",
              "      <th>PM10</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>0</td>\n",
              "      <td>42.206897</td>\n",
              "      <td>51.206897</td>\n",
              "      <td>74.827586</td>\n",
              "      <td>15.105862</td>\n",
              "      <td>23.448276</td>\n",
              "      <td>26.645172</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>1</td>\n",
              "      <td>42.333333</td>\n",
              "      <td>51.366667</td>\n",
              "      <td>81.466667</td>\n",
              "      <td>17.470000</td>\n",
              "      <td>26.582333</td>\n",
              "      <td>30.720667</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>2</td>\n",
              "      <td>41.266667</td>\n",
              "      <td>52.500000</td>\n",
              "      <td>91.900000</td>\n",
              "      <td>20.154000</td>\n",
              "      <td>31.453333</td>\n",
              "      <td>37.000333</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>3</td>\n",
              "      <td>39.966667</td>\n",
              "      <td>54.133333</td>\n",
              "      <td>100.666667</td>\n",
              "      <td>22.989000</td>\n",
              "      <td>35.400000</td>\n",
              "      <td>41.405667</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>4</td>\n",
              "      <td>39.600000</td>\n",
              "      <td>55.333333</td>\n",
              "      <td>112.833333</td>\n",
              "      <td>26.356333</td>\n",
              "      <td>40.306000</td>\n",
              "      <td>48.979000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>5</th>\n",
              "      <td>5</td>\n",
              "      <td>39.000000</td>\n",
              "      <td>56.666667</td>\n",
              "      <td>114.766667</td>\n",
              "      <td>26.774000</td>\n",
              "      <td>41.073667</td>\n",
              "      <td>50.033667</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>6</th>\n",
              "      <td>6</td>\n",
              "      <td>37.900000</td>\n",
              "      <td>58.800000</td>\n",
              "      <td>121.466667</td>\n",
              "      <td>28.334333</td>\n",
              "      <td>43.830000</td>\n",
              "      <td>54.793667</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>7</th>\n",
              "      <td>7</td>\n",
              "      <td>38.233333</td>\n",
              "      <td>62.100000</td>\n",
              "      <td>125.766667</td>\n",
              "      <td>28.790000</td>\n",
              "      <td>45.567667</td>\n",
              "      <td>57.950667</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>8</th>\n",
              "      <td>8</td>\n",
              "      <td>38.266667</td>\n",
              "      <td>62.200000</td>\n",
              "      <td>128.666667</td>\n",
              "      <td>29.682667</td>\n",
              "      <td>46.765000</td>\n",
              "      <td>59.567000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>9</th>\n",
              "      <td>9</td>\n",
              "      <td>37.233333</td>\n",
              "      <td>65.066667</td>\n",
              "      <td>132.166667</td>\n",
              "      <td>30.250000</td>\n",
              "      <td>48.140333</td>\n",
              "      <td>61.433000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>10</th>\n",
              "      <td>10</td>\n",
              "      <td>37.500000</td>\n",
              "      <td>66.933333</td>\n",
              "      <td>129.600000</td>\n",
              "      <td>29.545333</td>\n",
              "      <td>47.121000</td>\n",
              "      <td>60.071000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>11</th>\n",
              "      <td>11</td>\n",
              "      <td>39.033333</td>\n",
              "      <td>65.200000</td>\n",
              "      <td>121.566667</td>\n",
              "      <td>27.856667</td>\n",
              "      <td>43.797667</td>\n",
              "      <td>55.458667</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>12</th>\n",
              "      <td>12</td>\n",
              "      <td>39.300000</td>\n",
              "      <td>68.666667</td>\n",
              "      <td>125.700000</td>\n",
              "      <td>28.561667</td>\n",
              "      <td>45.514667</td>\n",
              "      <td>58.342333</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>13</th>\n",
              "      <td>13</td>\n",
              "      <td>41.566667</td>\n",
              "      <td>74.266667</td>\n",
              "      <td>125.766667</td>\n",
              "      <td>28.697000</td>\n",
              "      <td>45.544000</td>\n",
              "      <td>58.140667</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>14</th>\n",
              "      <td>14</td>\n",
              "      <td>43.100000</td>\n",
              "      <td>75.433333</td>\n",
              "      <td>124.100000</td>\n",
              "      <td>27.143000</td>\n",
              "      <td>44.907333</td>\n",
              "      <td>57.882667</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>15</th>\n",
              "      <td>15</td>\n",
              "      <td>43.600000</td>\n",
              "      <td>76.100000</td>\n",
              "      <td>114.600000</td>\n",
              "      <td>23.920000</td>\n",
              "      <td>41.040333</td>\n",
              "      <td>53.198667</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>16</th>\n",
              "      <td>16</td>\n",
              "      <td>45.433333</td>\n",
              "      <td>74.266667</td>\n",
              "      <td>116.000000</td>\n",
              "      <td>24.252333</td>\n",
              "      <td>41.619000</td>\n",
              "      <td>54.034667</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>17</th>\n",
              "      <td>17</td>\n",
              "      <td>47.600000</td>\n",
              "      <td>72.500000</td>\n",
              "      <td>116.366667</td>\n",
              "      <td>25.116333</td>\n",
              "      <td>41.772667</td>\n",
              "      <td>53.697333</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>18</th>\n",
              "      <td>18</td>\n",
              "      <td>49.166667</td>\n",
              "      <td>71.566667</td>\n",
              "      <td>106.633333</td>\n",
              "      <td>23.298000</td>\n",
              "      <td>37.815333</td>\n",
              "      <td>47.257667</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>19</th>\n",
              "      <td>19</td>\n",
              "      <td>50.000000</td>\n",
              "      <td>70.166667</td>\n",
              "      <td>100.666667</td>\n",
              "      <td>22.360333</td>\n",
              "      <td>35.440333</td>\n",
              "      <td>42.834667</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>20</th>\n",
              "      <td>20</td>\n",
              "      <td>50.366667</td>\n",
              "      <td>69.033333</td>\n",
              "      <td>95.433333</td>\n",
              "      <td>21.093333</td>\n",
              "      <td>33.152333</td>\n",
              "      <td>38.935000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>21</th>\n",
              "      <td>21</td>\n",
              "      <td>51.200000</td>\n",
              "      <td>67.433333</td>\n",
              "      <td>89.433333</td>\n",
              "      <td>19.027333</td>\n",
              "      <td>30.403000</td>\n",
              "      <td>34.746000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>22</th>\n",
              "      <td>22</td>\n",
              "      <td>50.766667</td>\n",
              "      <td>67.166667</td>\n",
              "      <td>87.800000</td>\n",
              "      <td>18.885667</td>\n",
              "      <td>29.615667</td>\n",
              "      <td>33.551333</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>23</th>\n",
              "      <td>23</td>\n",
              "      <td>49.000000</td>\n",
              "      <td>71.966667</td>\n",
              "      <td>98.933333</td>\n",
              "      <td>21.726333</td>\n",
              "      <td>34.686333</td>\n",
              "      <td>41.023000</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-d6dbad15-cf26-40f1-86a2-3ecb1f89bb1e')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "\n",
              "\n",
              "\n",
              "    <div id=\"df-c021b72a-b52f-4bf7-abf8-4fb148f55897\">\n",
              "      <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-c021b72a-b52f-4bf7-abf8-4fb148f55897')\"\n",
              "              title=\"Suggest charts.\"\n",
              "              style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "      </button>\n",
              "    </div>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "    background-color: #E8F0FE;\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: #1967D2;\n",
              "    height: 32px;\n",
              "    padding: 0 0 0 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: #E2EBFA;\n",
              "    box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: #174EA6;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "    background-color: #3B4455;\n",
              "    fill: #D2E3FC;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart:hover {\n",
              "    background-color: #434B5C;\n",
              "    box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "    filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "    fill: #FFFFFF;\n",
              "  }\n",
              "</style>\n",
              "\n",
              "    <script>\n",
              "      async function quickchart(key) {\n",
              "        const containerElement = document.querySelector('#' + key);\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      }\n",
              "    </script>\n",
              "\n",
              "      <script>\n",
              "\n",
              "function displayQuickchartButton(domScope) {\n",
              "  let quickchartButtonEl =\n",
              "    domScope.querySelector('#df-c021b72a-b52f-4bf7-abf8-4fb148f55897 button.colab-df-quickchart');\n",
              "  quickchartButtonEl.style.display =\n",
              "    google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "}\n",
              "\n",
              "        displayQuickchartButton(document);\n",
              "      </script>\n",
              "      <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-d6dbad15-cf26-40f1-86a2-3ecb1f89bb1e button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-d6dbad15-cf26-40f1-86a2-3ecb1f89bb1e');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n"
            ]
          },
          "metadata": {},
          "execution_count": 3
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "data.columns"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "ONW-MnDs-Nrt",
        "outputId": "d990fed3-a2a7-43ac-c273-d4663489a897"
      },
      "execution_count": 4,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "Index(['hour', 'temp(F)', 'humidity', 'AQI', 'PM1', 'PM2.5', 'PM10'], dtype='object')"
            ]
          },
          "metadata": {},
          "execution_count": 4
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "AQI=data['AQI'].mean()"
      ],
      "metadata": {
        "id": "A3tPxF8y67bn"
      },
      "execution_count": 5,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "avg_PM25=data['PM2.5'].mean()\n",
        "avg_PM10=data['PM10'].mean()"
      ],
      "metadata": {
        "id": "OIFX2URM67QZ"
      },
      "execution_count": 26,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "avg_PM25"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "qhJ3gx-X-f6v",
        "outputId": "aa277c76-bff4-46b9-9432-52333e110f76"
      },
      "execution_count": 10,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "38.958178160919545"
            ]
          },
          "metadata": {},
          "execution_count": 10
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "avg_PM10"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "nD8egFFp-tYr",
        "outputId": "e5f7e687-f27f-42dc-fdbd-64f7244a7322"
      },
      "execution_count": 27,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "48.23760440613027"
            ]
          },
          "metadata": {},
          "execution_count": 27
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "data[['hour','PM2.5','PM10']]"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 802
        },
        "id": "z7Pi_wURBNLj",
        "outputId": "7e46154a-a282-4c2e-bfb6-b30c76cc1fde"
      },
      "execution_count": 12,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "    hour      PM2.5       PM10\n",
              "0      0  23.448276  26.645172\n",
              "1      1  26.582333  30.720667\n",
              "2      2  31.453333  37.000333\n",
              "3      3  35.400000  41.405667\n",
              "4      4  40.306000  48.979000\n",
              "5      5  41.073667  50.033667\n",
              "6      6  43.830000  54.793667\n",
              "7      7  45.567667  57.950667\n",
              "8      8  46.765000  59.567000\n",
              "9      9  48.140333  61.433000\n",
              "10    10  47.121000  60.071000\n",
              "11    11  43.797667  55.458667\n",
              "12    12  45.514667  58.342333\n",
              "13    13  45.544000  58.140667\n",
              "14    14  44.907333  57.882667\n",
              "15    15  41.040333  53.198667\n",
              "16    16  41.619000  54.034667\n",
              "17    17  41.772667  53.697333\n",
              "18    18  37.815333  47.257667\n",
              "19    19  35.440333  42.834667\n",
              "20    20  33.152333  38.935000\n",
              "21    21  30.403000  34.746000\n",
              "22    22  29.615667  33.551333\n",
              "23    23  34.686333  41.023000"
            ],
            "text/html": [
              "\n",
              "\n",
              "  <div id=\"df-df1e75d2-b67e-47b2-86b0-9aa790caf196\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>hour</th>\n",
              "      <th>PM2.5</th>\n",
              "      <th>PM10</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>0</td>\n",
              "      <td>23.448276</td>\n",
              "      <td>26.645172</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>1</td>\n",
              "      <td>26.582333</td>\n",
              "      <td>30.720667</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>2</td>\n",
              "      <td>31.453333</td>\n",
              "      <td>37.000333</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>3</td>\n",
              "      <td>35.400000</td>\n",
              "      <td>41.405667</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>4</td>\n",
              "      <td>40.306000</td>\n",
              "      <td>48.979000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>5</th>\n",
              "      <td>5</td>\n",
              "      <td>41.073667</td>\n",
              "      <td>50.033667</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>6</th>\n",
              "      <td>6</td>\n",
              "      <td>43.830000</td>\n",
              "      <td>54.793667</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>7</th>\n",
              "      <td>7</td>\n",
              "      <td>45.567667</td>\n",
              "      <td>57.950667</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>8</th>\n",
              "      <td>8</td>\n",
              "      <td>46.765000</td>\n",
              "      <td>59.567000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>9</th>\n",
              "      <td>9</td>\n",
              "      <td>48.140333</td>\n",
              "      <td>61.433000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>10</th>\n",
              "      <td>10</td>\n",
              "      <td>47.121000</td>\n",
              "      <td>60.071000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>11</th>\n",
              "      <td>11</td>\n",
              "      <td>43.797667</td>\n",
              "      <td>55.458667</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>12</th>\n",
              "      <td>12</td>\n",
              "      <td>45.514667</td>\n",
              "      <td>58.342333</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>13</th>\n",
              "      <td>13</td>\n",
              "      <td>45.544000</td>\n",
              "      <td>58.140667</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>14</th>\n",
              "      <td>14</td>\n",
              "      <td>44.907333</td>\n",
              "      <td>57.882667</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>15</th>\n",
              "      <td>15</td>\n",
              "      <td>41.040333</td>\n",
              "      <td>53.198667</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>16</th>\n",
              "      <td>16</td>\n",
              "      <td>41.619000</td>\n",
              "      <td>54.034667</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>17</th>\n",
              "      <td>17</td>\n",
              "      <td>41.772667</td>\n",
              "      <td>53.697333</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>18</th>\n",
              "      <td>18</td>\n",
              "      <td>37.815333</td>\n",
              "      <td>47.257667</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>19</th>\n",
              "      <td>19</td>\n",
              "      <td>35.440333</td>\n",
              "      <td>42.834667</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>20</th>\n",
              "      <td>20</td>\n",
              "      <td>33.152333</td>\n",
              "      <td>38.935000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>21</th>\n",
              "      <td>21</td>\n",
              "      <td>30.403000</td>\n",
              "      <td>34.746000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>22</th>\n",
              "      <td>22</td>\n",
              "      <td>29.615667</td>\n",
              "      <td>33.551333</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>23</th>\n",
              "      <td>23</td>\n",
              "      <td>34.686333</td>\n",
              "      <td>41.023000</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-df1e75d2-b67e-47b2-86b0-9aa790caf196')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "\n",
              "\n",
              "\n",
              "    <div id=\"df-6461be67-a0a4-4e93-af07-8d7a85177384\">\n",
              "      <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-6461be67-a0a4-4e93-af07-8d7a85177384')\"\n",
              "              title=\"Suggest charts.\"\n",
              "              style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "      </button>\n",
              "    </div>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "    background-color: #E8F0FE;\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: #1967D2;\n",
              "    height: 32px;\n",
              "    padding: 0 0 0 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: #E2EBFA;\n",
              "    box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: #174EA6;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "    background-color: #3B4455;\n",
              "    fill: #D2E3FC;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart:hover {\n",
              "    background-color: #434B5C;\n",
              "    box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "    filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "    fill: #FFFFFF;\n",
              "  }\n",
              "</style>\n",
              "\n",
              "    <script>\n",
              "      async function quickchart(key) {\n",
              "        const containerElement = document.querySelector('#' + key);\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      }\n",
              "    </script>\n",
              "\n",
              "      <script>\n",
              "\n",
              "function displayQuickchartButton(domScope) {\n",
              "  let quickchartButtonEl =\n",
              "    domScope.querySelector('#df-6461be67-a0a4-4e93-af07-8d7a85177384 button.colab-df-quickchart');\n",
              "  quickchartButtonEl.style.display =\n",
              "    google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "}\n",
              "\n",
              "        displayQuickchartButton(document);\n",
              "      </script>\n",
              "      <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-df1e75d2-b67e-47b2-86b0-9aa790caf196 button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-df1e75d2-b67e-47b2-86b0-9aa790caf196');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n"
            ]
          },
          "metadata": {},
          "execution_count": 12
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "input_1= int(input(\"What is the AQI: \"))\n",
        "if input_1<50:\n",
        "  print(\"Good\")\n",
        "elif input_1<100 and input_1>51:\n",
        "  print(\"Moderate\")\n",
        "elif input_1<150 and input_1>101:\n",
        "  print(\"Unhealthly for Sensitive Groups\")\n",
        "elif input_1<200 and input_1>151:\n",
        "  print(\"Unhealthly, Wear a mask\")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "oq_i6VzNBzZ2",
        "outputId": "13308035-e57a-43f5-eb1a-0882328ab347"
      },
      "execution_count": 15,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "What is the AQI: 121\n",
            "Unhealthly for Sensitive Groups\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "\n",
        "data['temp(F)'].min()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "fvJtYUKEKnos",
        "outputId": "a9783981-9e59-4163-b102-e85685b2006e"
      },
      "execution_count": 16,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "37.23333333333333"
            ]
          },
          "metadata": {},
          "execution_count": 16
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "max_temp=data [data ['temp(F)'] == data['temp(F)'].max()][['hour','temp(F)']]"
      ],
      "metadata": {
        "id": "j1UwaPFKLWlo"
      },
      "execution_count": 17,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "max_temp"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 81
        },
        "id": "P8_ZJgA0MYdG",
        "outputId": "69878112-8a95-4e4d-fe9e-8d7bc4d9f3ac"
      },
      "execution_count": 18,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "    hour  temp(F)\n",
              "21    21     51.2"
            ],
            "text/html": [
              "\n",
              "\n",
              "  <div id=\"df-b9e3e3d9-ef1f-4c13-a8c0-3ab31bf4eacf\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>hour</th>\n",
              "      <th>temp(F)</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>21</th>\n",
              "      <td>21</td>\n",
              "      <td>51.2</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-b9e3e3d9-ef1f-4c13-a8c0-3ab31bf4eacf')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "\n",
              "\n",
              "\n",
              "    <div id=\"df-723186b2-5737-4162-95a7-aa15e2047e17\">\n",
              "      <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-723186b2-5737-4162-95a7-aa15e2047e17')\"\n",
              "              title=\"Suggest charts.\"\n",
              "              style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "      </button>\n",
              "    </div>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "    background-color: #E8F0FE;\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: #1967D2;\n",
              "    height: 32px;\n",
              "    padding: 0 0 0 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: #E2EBFA;\n",
              "    box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: #174EA6;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "    background-color: #3B4455;\n",
              "    fill: #D2E3FC;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart:hover {\n",
              "    background-color: #434B5C;\n",
              "    box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "    filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "    fill: #FFFFFF;\n",
              "  }\n",
              "</style>\n",
              "\n",
              "    <script>\n",
              "      async function quickchart(key) {\n",
              "        const containerElement = document.querySelector('#' + key);\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      }\n",
              "    </script>\n",
              "\n",
              "      <script>\n",
              "\n",
              "function displayQuickchartButton(domScope) {\n",
              "  let quickchartButtonEl =\n",
              "    domScope.querySelector('#df-723186b2-5737-4162-95a7-aa15e2047e17 button.colab-df-quickchart');\n",
              "  quickchartButtonEl.style.display =\n",
              "    google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "}\n",
              "\n",
              "        displayQuickchartButton(document);\n",
              "      </script>\n",
              "      <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-b9e3e3d9-ef1f-4c13-a8c0-3ab31bf4eacf button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-b9e3e3d9-ef1f-4c13-a8c0-3ab31bf4eacf');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n"
            ]
          },
          "metadata": {},
          "execution_count": 18
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "min_temp=data [data ['temp(F)'] == data['temp(F)'].min()][['hour','temp(F)']]"
      ],
      "metadata": {
        "id": "JDLOmiCvLmow"
      },
      "execution_count": 19,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "min_temp"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 81
        },
        "id": "PNNYjTRxMM1v",
        "outputId": "31ffb429-5701-4966-ddea-c6a42f69723d"
      },
      "execution_count": 20,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "   hour    temp(F)\n",
              "9     9  37.233333"
            ],
            "text/html": [
              "\n",
              "\n",
              "  <div id=\"df-54db261f-2013-45f9-a372-ab5d7cc27774\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>hour</th>\n",
              "      <th>temp(F)</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>9</th>\n",
              "      <td>9</td>\n",
              "      <td>37.233333</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-54db261f-2013-45f9-a372-ab5d7cc27774')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "\n",
              "\n",
              "\n",
              "    <div id=\"df-06a26286-e9ff-44cb-a3dc-5bd273c7a17c\">\n",
              "      <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-06a26286-e9ff-44cb-a3dc-5bd273c7a17c')\"\n",
              "              title=\"Suggest charts.\"\n",
              "              style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "      </button>\n",
              "    </div>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "    background-color: #E8F0FE;\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: #1967D2;\n",
              "    height: 32px;\n",
              "    padding: 0 0 0 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: #E2EBFA;\n",
              "    box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: #174EA6;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "    background-color: #3B4455;\n",
              "    fill: #D2E3FC;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart:hover {\n",
              "    background-color: #434B5C;\n",
              "    box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "    filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "    fill: #FFFFFF;\n",
              "  }\n",
              "</style>\n",
              "\n",
              "    <script>\n",
              "      async function quickchart(key) {\n",
              "        const containerElement = document.querySelector('#' + key);\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      }\n",
              "    </script>\n",
              "\n",
              "      <script>\n",
              "\n",
              "function displayQuickchartButton(domScope) {\n",
              "  let quickchartButtonEl =\n",
              "    domScope.querySelector('#df-06a26286-e9ff-44cb-a3dc-5bd273c7a17c button.colab-df-quickchart');\n",
              "  quickchartButtonEl.style.display =\n",
              "    google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "}\n",
              "\n",
              "        displayQuickchartButton(document);\n",
              "      </script>\n",
              "      <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-54db261f-2013-45f9-a372-ab5d7cc27774 button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-54db261f-2013-45f9-a372-ab5d7cc27774');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n"
            ]
          },
          "metadata": {},
          "execution_count": 20
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "print((\"The average concentrations for PM2.5 is\"), avg_PM25)\n",
        "print((\"The average concentrations for PM10 is\"), avg_PM10)\n",
        "print((\"Here is the hour by hour PM2.5 and PM10 concentrations\"), data[['hour','PM2.5','PM10']])\n",
        "print((\"Here is the maximum temp correspond to the hour in the day\"), max_temp)\n",
        "print((\"Here is the minimum temp corrsponded to the hour in the day\"), min_temp)\n",
        "\n",
        "\n",
        "input_1= int(input(\"What is the AQI: \"))\n",
        "if input_1<50:\n",
        "  print(\"Good\")\n",
        "elif input_1<100 and input_1>51:\n",
        "  print(\"Moderate\")\n",
        "elif input_1<150 and input_1>101:\n",
        "  print(\"Unhealthly for Sensitive Groups\")\n",
        "elif input_1<200 and input_1>151:\n",
        "  print(\"Unhealthly, Wear a mask\")\n",
        "\n",
        "\n",
        "import matplotlib.pyplot as plt\n",
        "import numpy as np\n",
        "x =np.array(data['hour'])\n",
        "y =np.array(data['humidity'])\n",
        "plt.plot (x,y)\n",
        "plt.title('Humidity V Hours)')\n",
        "plt.xlabel('Hours')\n",
        "plt.ylabel('Humidity')"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 1000
        },
        "id": "qDGgjOHmO99m",
        "outputId": "cdb66742-0991-407c-ca51-24f4dbd5204d"
      },
      "execution_count": 34,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "The average concentrations for PM2.5 is 38.958178160919545\n",
            "The average concentrations for PM10 is 48.23760440613027\n",
            "Here is the hour by hour PM2.5 and PM10 concentrations     hour      PM2.5       PM10\n",
            "0      0  23.448276  26.645172\n",
            "1      1  26.582333  30.720667\n",
            "2      2  31.453333  37.000333\n",
            "3      3  35.400000  41.405667\n",
            "4      4  40.306000  48.979000\n",
            "5      5  41.073667  50.033667\n",
            "6      6  43.830000  54.793667\n",
            "7      7  45.567667  57.950667\n",
            "8      8  46.765000  59.567000\n",
            "9      9  48.140333  61.433000\n",
            "10    10  47.121000  60.071000\n",
            "11    11  43.797667  55.458667\n",
            "12    12  45.514667  58.342333\n",
            "13    13  45.544000  58.140667\n",
            "14    14  44.907333  57.882667\n",
            "15    15  41.040333  53.198667\n",
            "16    16  41.619000  54.034667\n",
            "17    17  41.772667  53.697333\n",
            "18    18  37.815333  47.257667\n",
            "19    19  35.440333  42.834667\n",
            "20    20  33.152333  38.935000\n",
            "21    21  30.403000  34.746000\n",
            "22    22  29.615667  33.551333\n",
            "23    23  34.686333  41.023000\n",
            "Here is the maximum temp correspond to the hour in the day     hour  temp(F)\n",
            "21    21     51.2\n",
            "Here is the minimum temp corrsponded to the hour in the day    hour    temp(F)\n",
            "9     9  37.233333\n",
            "What is the AQI: 99\n",
            "Moderate\n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "Text(0, 0.5, 'Humidity')"
            ]
          },
          "metadata": {},
          "execution_count": 34
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import matplotlib.pyplot as plt\n",
        "import numpy as np\n",
        "x =np.array(data['hour'])\n",
        "y =np.array(data['humidity'])\n",
        "plt.plot (x,y)\n",
        "plt.title('Humidity V Hours)')\n",
        "plt.xlabel('Hours')\n",
        "plt.ylabel('Humidity')"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 490
        },
        "id": "Gu0cJ7f5URD-",
        "outputId": "2830be93-ee39-42c8-ea76-653a5163070d"
      },
      "execution_count": 33,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "Text(0, 0.5, 'Humidity')"
            ]
          },
          "metadata": {},
          "execution_count": 33
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "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\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "0DGUfm-UURBW"
      },
      "execution_count": 29,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "x"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "8mOtjbWXUQ2N",
        "outputId": "1ac52ab7-6c91-4e47-a544-1eb3ffacf73f"
      },
      "execution_count": 30,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16,\n",
              "       17, 18, 19, 20, 21, 22, 23])"
            ]
          },
          "metadata": {},
          "execution_count": 30
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "y"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "kjgQ29cHhdda",
        "outputId": "b7418381-fa3a-454d-dff1-1ed4dcf5683c"
      },
      "execution_count": 31,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array([51.20689655, 51.36666667, 52.5       , 54.13333333, 55.33333333,\n",
              "       56.66666667, 58.8       , 62.1       , 62.2       , 65.06666667,\n",
              "       66.93333333, 65.2       , 68.66666667, 74.26666667, 75.43333333,\n",
              "       76.1       , 74.26666667, 72.5       , 71.56666667, 70.16666667,\n",
              "       69.03333333, 67.43333333, 67.16666667, 71.96666667])"
            ]
          },
          "metadata": {},
          "execution_count": 31
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "plt.plot(x,y)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 448
        },
        "id": "KjXDWKiKhehr",
        "outputId": "692ccfcb-cbf9-4b5d-d9a9-52fe18abf1a8"
      },
      "execution_count": 32,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "[<matplotlib.lines.Line2D at 0x7d667140e320>]"
            ]
          },
          "metadata": {},
          "execution_count": 32
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "cknFYwTShosq"
      },
      "execution_count": 32,
      "outputs": []
    }
  ]
}